// <auto-generated />
using System;
using AdasIt.Andor.Budgets.InfrastructureQueries.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdasIt.Andor.Budgets.InfrastructureQueries.Migrations
{
    [DbContext(typeof(BudgetContext))]
    partial class BudgetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Account", "budget");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeactivationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Category", "budget");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Currencies.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Iso")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.HasKey("Id");

                    b.ToTable("Currency", "budget");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.FinancialMovements.FinancialMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("FinancialMovement", "budget");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Invites.Invite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvitingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GuestId");

                    b.HasIndex("InvitingId");

                    b.ToTable("Invite", "budget");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.PaymentMethods.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeactivationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("PaymentMethod", "budget");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.SubCategories.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeactivationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DefaultPaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DefaultPaymentMethodId");

                    b.ToTable("SubCategory", "budget");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<Guid>("PreferredCurrencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PreferredLanguageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("User", "budget");
                });

            modelBuilder.Entity("AdasIt.Andor.Domain.Events.DomainEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("DomainEvent");
                });

            modelBuilder.Entity("AdasIt.Andor.InfrastructureQueries.ProcessedEvents", b =>
                {
                    b.Property<Guid>("AggregatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProjectionName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AggregatorId", "EventId", "ProjectionName");

                    b.ToTable("ProcessedEvents", "Administration");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Accounts.Account", b =>
                {
                    b.HasOne("AdasIt.Andor.Budgets.Domain.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Categories.Category", b =>
                {
                    b.HasOne("AdasIt.Andor.Budgets.Domain.Accounts.Account", null)
                        .WithMany("Categories")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.FinancialMovements.FinancialMovement", b =>
                {
                    b.HasOne("AdasIt.Andor.Budgets.Domain.PaymentMethods.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdasIt.Andor.Budgets.Domain.SubCategories.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Invites.Invite", b =>
                {
                    b.HasOne("AdasIt.Andor.Budgets.Domain.Accounts.Account", "Account")
                        .WithMany("Invites")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdasIt.Andor.Budgets.Domain.Users.User", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId");

                    b.HasOne("AdasIt.Andor.Budgets.Domain.Users.User", "Inviting")
                        .WithMany()
                        .HasForeignKey("InvitingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Guest");

                    b.Navigation("Inviting");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.PaymentMethods.PaymentMethod", b =>
                {
                    b.HasOne("AdasIt.Andor.Budgets.Domain.Accounts.Account", null)
                        .WithMany("PaymentMethods")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.SubCategories.SubCategory", b =>
                {
                    b.HasOne("AdasIt.Andor.Budgets.Domain.Accounts.Account", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("AccountId");

                    b.HasOne("AdasIt.Andor.Budgets.Domain.Categories.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdasIt.Andor.Budgets.Domain.PaymentMethods.PaymentMethod", "DefaultPaymentMethod")
                        .WithMany()
                        .HasForeignKey("DefaultPaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DefaultPaymentMethod");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Users.User", b =>
                {
                    b.HasOne("AdasIt.Andor.Budgets.Domain.Accounts.Account", null)
                        .WithMany("Members")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("AdasIt.Andor.Domain.Events.DomainEvent", b =>
                {
                    b.HasOne("AdasIt.Andor.Budgets.Domain.Users.User", null)
                        .WithMany("Events")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Accounts.Account", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("PaymentMethods");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Categories.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("AdasIt.Andor.Budgets.Domain.Users.User", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
